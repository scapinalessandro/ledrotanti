#include <SPI.h>

#define MOSI D10
#define SCLK D8
#define RCLK D9
#define BUFFER_1 D0
#define BUFFER_2 D6
#define BUFFER_3 D4
#define BUFFER_4 D2
#define TRG_1 D1
#define TRG_2 D5
#define TRG_3 D3
#define TRG_4 D7

const uint8_t zero[] = {0,0,0,0,0};

const int angleCoeff = 5; // una striscia di immagine ogni 5 gradi. per essere cambiata deve cambiare anche image
int position = 0;   // le posizioni massime sono date da angleCoeff. in questo caso positions non puo superare 72 (71 visto che Ã¨ un indice) (360/5)

SPISettings settings(40000000, MSBFIRST, SPI_MODE0);

uint8_t image[72][5] = 
{
  {0x3,0xff,0xff,0xbf,0xff},
  {0x3,0xff,0xf9,0xf8,0x56},
  {0x3,0xff,0x9f,0xf8,0x0},
  {0x3,0xf9,0xff,0xff,0xf8},
  {0x3,0xdf,0xff,0xff,0xfe},
  {0x3,0x3f,0xff,0xff,0xff},
  {0x3,0x7f,0xff,0xff,0xff},
  {0x3,0xcf,0xff,0xff,0xf8},
  {0x3,0xfc,0x3f,0xff,0xf0},
  {0x3,0xff,0xc3,0xff,0xf8},
  {0x3,0xff,0xfc,0x7f,0xfc},
  {0x3,0xff,0xff,0xcf,0xfe},
  {0x3,0xff,0xff,0xc1,0xff},
  {0x3,0xff,0xfe,0x3e,0x7f},
  {0x3,0xff,0xe1,0xff,0xbf},
  {0x3,0xf0,0x1f,0xff,0xe7},
  {0x3,0xc0,0x3f,0xff,0xe7},
  {0x3,0xc7,0xff,0xff,0xf3},
  {0x3,0xe7,0xff,0xff,0xf8},
  {0x3,0xf3,0xff,0xff,0xf9},
  {0x3,0xfe,0x3f,0xff,0xfc},
  {0x3,0xff,0xc7,0xff,0xfe},
  {0x3,0xff,0xfc,0x7f,0xfe},
  {0x3,0xff,0xff,0x81,0xfe},
  {0x3,0xff,0xff,0xe1,0xfe},
  {0x3,0xff,0xff,0xf0,0x7e},
  {0x3,0xff,0xff,0xff,0xe},
  {0x3,0xff,0xff,0xff,0x86},
  {0x3,0xff,0xff,0xff,0xc1},
  {0x3,0xff,0xff,0xff,0xf1},
  {0x2,0x3,0xff,0xf7,0xf0},
  {0x3,0x3,0xff,0xff,0xe0},
  {0x3,0xcf,0xff,0xff,0x80},
  {0x3,0xf8,0xff,0xff,0x8e},
  {0x3,0xff,0x8f,0xff,0x1e},
  {0x3,0xff,0xf8,0xf8,0x7e},
  {0x3,0xff,0xff,0x0,0x7f},
  {0x3,0xff,0xff,0x7,0xfc},
  {0x3,0xff,0xf8,0xe0,0xfc},
  {0x3,0xff,0xcf,0xfc,0x3e},
  {0x3,0xf9,0xff,0xff,0x1c},
  {0x3,0xcf,0xff,0xff,0xc},
  {0x2,0xf,0xff,0xff,0xc0},
  {0x3,0xdf,0xff,0xdf,0xc0},
  {0x3,0xff,0xff,0xff,0xc0},
  {0x3,0xff,0xff,0xff,0x2},
  {0x3,0xff,0xff,0xfe,0x11},
  {0x3,0xff,0xff,0xf0,0x79},
  {0x3,0xff,0xff,0xc1,0xf9},
  {0x3,0xff,0xff,0x7,0xf9},
  {0x3,0xff,0xf0,0xff,0xf1},
  {0x3,0xff,0x1f,0xff,0xf3},
  {0x3,0xf8,0xff,0xff,0xf3},
  {0x3,0xcf,0xff,0xff,0xe7},
  {0x3,0x83,0xff,0xff,0xe7},
  {0x3,0x7,0xff,0xff,0x8f},
  {0x3,0xf1,0xff,0xff,0x1f},
  {0x3,0xff,0x1f,0xfc,0x3f},
  {0x3,0xff,0xf1,0xf8,0x7f},
  {0x3,0xff,0xff,0x1,0xff},
  {0x3,0xff,0xff,0xf,0xff},
  {0x3,0xff,0xf8,0x3f,0xff},
  {0x3,0xff,0x8f,0xff,0xff},
  {0x3,0xfc,0x7f,0xff,0xff},
  {0x3,0xe7,0xff,0xff,0xfe},
  {0x0,0x7,0xff,0xff,0xf0},
  {0x3,0xf,0xff,0xff,0xe0},
  {0x3,0xff,0xff,0x3f,0xf0},
  {0x3,0xff,0xff,0xff,0xf0},
  {0x3,0xff,0xfc,0xff,0xf8},
  {0x3,0xff,0xff,0x9f,0xfc},
  {0x3,0xff,0xff,0xff,0xff},
};

void setup() {
  SPI.begin(SCLK, -1, MOSI);
  Serial.begin(9600);
  pinMode(TRG_2, INPUT);
  pinMode(BUFFER_1, OUTPUT);
  pinMode(BUFFER_2, OUTPUT);
  pinMode(BUFFER_3, OUTPUT);
  pinMode(BUFFER_4, OUTPUT);
  pinMode(RCLK, OUTPUT);
  SPI.beginTransaction(settings);
}

void loop() 
{
  writeImg(position);

  digitalWrite(RCLK, HIGH);
  digitalWrite(RCLK, LOW);
  delay(100);
  position++;
  if(position >= 72) position = 0;
}

void writeImg(uint8_t pos)
{
  digitalWrite(BUFFER_1, LOW);
  digitalWrite(BUFFER_2, HIGH);
  digitalWrite(BUFFER_3, HIGH);
  digitalWrite(BUFFER_4, HIGH);
  SPI.writeBytes(image[pos],5);
  digitalWrite(BUFFER_1, HIGH);
  digitalWrite(BUFFER_2, LOW);
  digitalWrite(BUFFER_3, HIGH);
  digitalWrite(BUFFER_4, HIGH);
  SPI.writeBytes(image[getPosFromAngle(1,pos)],5);
  digitalWrite(BUFFER_1, HIGH);
  digitalWrite(BUFFER_2, HIGH);
  digitalWrite(BUFFER_3, LOW);
  digitalWrite(BUFFER_4, HIGH);
  SPI.writeBytes(image[getPosFromAngle(2,pos)],5);
  digitalWrite(BUFFER_1, HIGH);
  digitalWrite(BUFFER_2, HIGH);
  digitalWrite(BUFFER_3, HIGH);
  digitalWrite(BUFFER_4, LOW);
  SPI.writeBytes(image[getPosFromAngle(3,pos)],5);
}

uint8_t getPosFromAngle(uint8_t angle, uint8_t pos)   // l'angolo deve essere 1,2,3 che sono rispettivamente 90, 180, 270 gradi
{
  uint8_t val = int(90 / angleCoeff) * angle + pos;
  if(val > 71) val = val - 72;
  return val;
}
